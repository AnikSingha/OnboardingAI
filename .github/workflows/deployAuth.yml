name: Deploy auth

on:
  push:
    branches:
      - auth

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Inject environment variables
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Inject environment variables
            export ALGORITHM="${{ secrets.ALGORITHM }}"
            export DB_URI="${{ secrets.DB_URI }}"
            export EMAILPASSWORD="${{ secrets.EMAILPASSWORD }}"
            export SECRET_KEY="${{ secrets.SECRET_KEY }}"
            echo "Current directory: $(pwd)"
            cd OnboardingAI/auth-service
            echo "Environment variables injected."
          EOF

      - name: Update code and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd OnboardingAI
            
            # Time npm install
            echo "Installing npm packages..."
            start_time=$(date +%s)
            npm install
            end_time=$(date +%s)
            echo "npm install took $((end_time - start_time)) seconds."

            cd auth-service

            # Pull latest code
            echo "Pulling latest code from repo..."
            git checkout auth
            git pull

            # Time killing and starting Express instance
            echo "Terminating any previously running Node.js instances..."
            start_time=$(date +%s)
            sudo pkill -f node || echo "No Node.js processes found."
            sleep 2
            echo "Starting the Express server..."
            nohup sudo ~/.nvm/versions/node/v22.9.0/bin/node server.js > output.log 2>&1 &
            end_time=$(date +%s)
            echo "Killing and starting Express instance took $((end_time - start_time)) seconds."

            # Test the Nginx configuration
            echo "Testing Nginx configuration..."
            sudo nginx -t
            if [ $? -eq 0 ]; then
              echo "Nginx configuration is valid. Reloading Nginx..."
              sudo systemctl reload nginx
              echo "Nginx reloaded."
            else
              echo "Nginx configuration is invalid. Aborting reload."
              exit 1
            fi
            exit
          EOF
  
